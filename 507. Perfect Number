/*
We define the Perfect Number is a positive integer that is equal to the sum of all its positive divisors except itself.

Now, given an integer n, write a function that returns true when it is a perfect number and false when it is not.
Example:
Input: 28
Output: True
Explanation: 28 = 1 + 2 + 4 + 7 + 14
Note: The input number n will not exceed 100,000,000. (1e8)
*/


//My Answer
bool checkPerfectNumber(int num) {
    int sum = 0;
    if(num <= 1)
        return false;
    for(int i = 1 ; i < num/2+1 ; i++)   //这里num/2是必须的，不然单纯的num会导致任务量加重一倍，运算时间超时
    {
        if(num % i == 0)
            sum += i;
    }
    if(sum == num)
        return true;
    else
        return false;
        
}


//他山之玉
//C++

bool checkPerfectNumber(int num) {
        int sum=1;
        for(int i=2;i<=sqrt(num);i++) if(num%i==0) sum += i + (i==num/i ? 0 : num/i);
        return sum==num && num!=1;
    }
    
    
//C++
class Solution {
public:
    bool checkPerfectNumber(int num) {
        static unordered_set<int> n = {6, 28, 496, 8128, 33550336};
        return n.count(num);
    }
};


//C++
class Solution {
public:
    bool checkPerfectNumber(int num) {
        if (num <= 1) {
            return false;
        }
        int sum = 1, left = 2, right = num / 2;
        while (left < right) {
            if (left * right == num) {
                sum += left + right;
            }
            ++left;
            right = num / left;
        }
        return sum == num;
    }
};
