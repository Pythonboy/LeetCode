/*
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.

Example 1:

Input: [3,2,3]
Output: 3
Example 2:

Input: [2,2,1,1,1,2,2]
Output: 2
*/


//My Answer
int cmp(const void * a, const void * b)
{
    return *(int *)a - *(int *)b;
}
int majorityElement(int* nums, int numsSize) {
    qsort(nums,numsSize,sizeof(int),cmp);
    int i;
    int res;
    if(nums == NULL)
        return NULL;
    for(i=0; i<numsSize ; i++)
    {
        if(nums[i] == nums[i+numsSize/2])
        {
            res = nums[i];
            break;
        }
    }
    return res;
}


//他山之玉
//Python
return sorted(num)[len(num)/2]


//C++
int majorityElement(vector<int> &num) {
    int majorityIndex = 0;
    for (int count = 1, i = 1; i < num.size(); i++) {
        num[majorityIndex] == num[i] ? count++ : count--;
        if (count == 0) {
            majorityIndex = i;
            count = 1;
        }
    }
        
    return num[majorityIndex];
}

//C
int majorityElement(int num[], int n) {
    int cnt = 0, res;
    for (int i = 0; i < n; ++i) {
        if (cnt == 0) res = num[i];
        if (res == num[i]) ++cnt;
        else --cnt;
    }
    return res;
}
