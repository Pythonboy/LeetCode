/*
Given a n-ary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

For example, given a 3-ary tree:

 


 
We should return its max depth, which is 3.

Note:

The depth of the tree is at most 1000.
The total number of nodes is at most 5000.
 
 */

//Java
class Solution {
    public int max = 0;
    public int maxDepth(Node root) {
        if (root == null) return 0;
        dfs(root, 1);
        return max;
    }
    
    public void dfs(Node root, int depth) {
        if (root == null) return;
        max = Math.max(max, depth);
        for(Node node: root.children)
            dfs(node, depth+1);
    }
}

//Java
public int maxDepth(Node root) {
        if(root==null) return 0;
        
        if(root.children == null) return 1;
        
        int maxDepth = 0;
        for(Node child:root.children) {
            maxDepth = Integer.max(maxDepth, maxDepth(child));
        }
        
        return maxDepth+1;
    }
    
//Python BFS
class Solution(object):
    def maxDepth(self, root):
        if not root: return 0
        if not root.children: return 1
        
        max_depth = 0
        q = [root, 'X']
        while len(q) >0:
            node = q.pop(0)
            if node == 'X': 
                max_depth += 1
                if len(q): q.append('X')
                continue
            if node and node.children: 
                for c in node.children: 
                    q.append(c)
            
        return max_depth
 //C++ DFS
class Solution {
public:
    int maxDepth(Node* root) {
        if(root==NULL) return 0;
        int maxx = 1;
        for(auto i:root->children) maxx = max( maxx , maxDepth(i)+1 );
        return maxx;
    }
};
