/*

You're given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.

The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so "a" is considered a different type of stone from "A".

Example 1:

Input: J = "aA", S = "aAAbbbb"
Output: 3
Example 2:

Input: J = "z", S = "ZZ"
Output: 0
Note:

S and J will consist of letters and have length at most 50.
The characters in J are distinct.
*/

//My Answer
//思路一：用string.h中的strchr()来判断S中的字符是否在J中出现
int numJewelsInStones(char* J, char* S) {
    int sum = 0;
    int len = strlen(S);
    for(int i=0 ; i<len ; i++)
    {
        if(strchr(J,S[i]))
            sum++;
    }
    return sum;
}


//思路二： 哈希表
//C++
int numJewelsInStones(string J, string S) {
        int res = 0;
        unordered_set<char> setJ(J.begin(), J.end());
        for (char s : S) if (setJ.count(s)) res++;
        return res;
    }
 
//C++
class Solution {
public:
    int numJewelsInStones(string J, string S) {
        int len = J.size();
        int sum = 0;
        for(int i=0 ; i<len ; i++)
            sum += count(S.begin(),S.end(),J[i]);
        return sum;
            
    }
};
    
//他山之玉
//Python
return len([x for x in S if x in J])

//C++
class Solution {
public:
    int numJewelsInStones(string J, string S) {
        unordered_set<char>s(J.begin(),J.end());
        int ans = 0;
        for(auto c : S)
        {
            if(s.count(c) > 0) {
                ans ++;
            }
        }
        return ans;
    }
};

//C
//思路：用字符串中的字符的ASCII值作为下标，记录字符串S中各个字符出现的次数，然后比较J中包含的S的字符所代表的次数值相加
int numJewelsInStones(char* J, char* S) {
	int arrlen = 'z'+1;
	char* arr = (char*)malloc(arrlen);
	memset(arr, 0, arrlen);
	for (int i = 0; i < strlen(S); i ++) {
		arr[S[i]] += 1;	
	}
	int cnt = 0;
	for (int j = 0; j < strlen(J); j ++) {
		cnt += arr[J[j]];
	}
	free(arr);
	return cnt;
}
