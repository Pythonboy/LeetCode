/*Write a program to check whether a given number is an ugly number.

Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.

Example 1:

Input: 6
Output: true
Explanation: 6 = 2 × 3
Example 2:

Input: 8
Output: true
Explanation: 8 = 2 × 2 × 2
Example 3:

Input: 14
Output: false 
Explanation: 14 is not ugly since it includes another prime factor 7.
Note:

1 is typically treated as an ugly number.
Input is within the 32-bit signed integer range: [−231,  231 − 1].
*/


//My Answer
//思路：首先所有的负数和0都not ugly,对于大于1的数，看它的公因子中是否包含非2，3，5的数，有的话就not ugly.
int Is_prime(int z)
{
    int item = (int)sqrt(z)+1;
    int j;
    if (z<2)
        return 0;
    else if (z == 2 || z == 3)
        return 1;
    else if (z%6!=1 && z%6!=5)
        return 0;
    for (j = 5; j < item; j+=6)
    {
        if (z%j==0 || z%(j+2)==0)
            return 0;
    }
    return 1;
}

bool isUgly(int num) {
    if(num <= 0)
        return false;
    else if(num == 1)
        return true;
    else
    {
        while(!Is_prime(num))
        {
            if(num%2 == 0)
                num = num/2;
            else if(num%3 == 0)
                num = num/3;
            else if(num%5 == 0)
                num = num/5;
            else
                return false;
        }
        if(num==2 || num==3 || num==5)
            return true;
        else
            return false;
    }
}


//他山之玉
//Python （他的循环就简单很多）
def isUgly(self, num):
    """
    :type num: int
    :rtype: bool
    """
    if num <= 0:
        return False
    for x in [2, 3, 5]:
        while num % x == 0:
            num = num / x
    return num == 1
    
 //C
 for (int i=2; i<6 && num; i++)
    while (num % i == 0)
        num /= i;
return num == 1;

//Python
class Solution(object):
    def isUgly(self, num):
        """
        :type num: int
        :rtype: bool
        """
        #n = (2**30)*(3**20)*(5**13) = 4570198050078720000000000000L
        return False if num < 1 or (4570198050078720000000000000L)%num != 0 else True
