/*
Given a sorted array nums, remove the duplicates in-place such that each element appear only once and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Example 1:

Given nums = [1,1,2],

Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively.

It doesn't matter what you leave beyond the returned length.
Example 2:

Given nums = [0,0,1,1,1,2,2,3,3,4],

Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively.

It doesn't matter what values are set beyond the returned length.
Clarification:

Confused why the returned value is an integer but your answer is an array?

Note that the input array is passed in by reference, which means modification to the input array will be known to the caller as well.

Internally you can think of this:

// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);

// any modification to nums in your function would be known by the caller.
// using the length returned by your function, it prints the first len elements.
for (int i = 0; i < len; i++) {
    print(nums[i]);
}
*/


//My Answer
//思路：对重复的数赋值为该数组的最大值+1或者最小值-1，然后对其排序
（一）最小值
int cmp(const void * a, const void * b)
{
    return *(int *)a - *(int *)b;
}

int cop(const void * a, const void * b)
{
    return *(int *)b - *(int *)a;
}

int Min(int * nums,int numsSize)
{
    int min = nums[0];
    for(int i=0 ; i<numsSize ; i++)
    {
        if(nums[i] < min)
            min = nums[i];
    }
    return min;
}

int removeDuplicates(int* nums, int numsSize) {
    int length = numsSize;
    int min = Min(nums,numsSize) - 1;
    for(int i = 0 ; i<numsSize-1 ; i++)
    {
        if(nums[i] == nums[i+1])
        {
            length--;
            nums[i] = min;
        }
            
    }
    qsort(nums,numsSize,sizeof(int),cop);
    qsort(nums,length,sizeof(int),cmp);
    return length;
}

(二）最大值（更加简洁）
int cmp(const void * a, const void * b)
{
    return *(int *)a - *(int *)b;
}


int Max(int * nums,int numsSize)
{
    int max = nums[0];
    for(int i=0 ; i<numsSize ; i++)
    {
        if(nums[i] > max)
            max = nums[i];
    }
    return max;
}

int removeDuplicates(int* nums, int numsSize) {
    int length = numsSize;
    int max = Max(nums,numsSize) + 1;
    for(int i = 0 ; i<numsSize-1 ; i++)
    {
        if(nums[i] == nums[i+1])
        {
            length--;
            nums[i] = max;
        }          
    }
    qsort(nums,numsSize,sizeof(int),cmp);
    return length;
}


//他山之玉
//思路大体都是用快的非重复值覆盖慢的length上对应的值
//C++
int count = 0;
for(int i = 1; i < n; i++){
    if(A[i] == A[i-1]) count++;
    else A[i-count] = A[i];
}
return n-count;


//C++
class Solution {
    public:
    int removeDuplicates(int A[], int n) {
        if(n < 2) return n;
        int id = 1;
        for(int i = 1; i < n; ++i) 
            if(A[i] != A[i-1]) A[id++] = A[i];
        return id;
    }
};

//C++
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int last=0, i, len=nums.size();
        if(!len) return 0;
        for(i=0; i<len;++i)
        {
            if(nums[i]!=nums[last]) nums[++last] = nums[i];
        }
        return last+1;
        
    }
};
