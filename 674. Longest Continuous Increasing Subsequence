/*
Given an unsorted array of integers, find the length of longest continuous increasing subsequence (subarray).

Example 1:
Input: [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5], its length is 3. 
Even though [1,3,5,7] is also an increasing subsequence, it's not a continuous one where 5 and 7 are separated by 4. 
Example 2:
Input: [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2], its length is 1.
*/


//My Answer
//思路：当nums为NULL时，返回0；记录连续增长的数的个数，并于max进行比较
int findLengthOfLCIS(int* nums, int numsSize) {
    if(numsSize == 0)
        return 0;
    int max = 1;
    int count = 1;
    for(int i=1 ; i<numsSize ; i++)
    {
        if(nums[i]>nums[i-1])
        {
            count++;
            if(count>max)
                max = count;
        }
        else
        {
            count = 1;
        }
    }
    return max;
}

//他山之玉
    int findLengthOfLCIS(vector<int>& nums) {
        int res = 0, cnt = 0;
        for(int i = 0; i < nums.size(); i++){
            if(i == 0 || nums[i-1] < nums[i]) res = max(res, ++cnt);
            else cnt = 1;
        }
        return res;
    }
    
class Solution {
public:
    int findLengthOfLCIS(vector<int>& nums) {
        int len = 1;
        int ans = len;
        
        if (nums.size() == 0) 
            return 0;
        
        for (int i = 1; i < nums.size(); ++i) {
            len =  (nums[i] > nums[i-1]) ?
                   (len + 1) : 1;
            ans = max(len, ans);
        }
        return ans;
    }
};
