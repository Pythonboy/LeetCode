/*
Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.

Note:

The length of both num1 and num2 is < 5100.
Both num1 and num2 contains only digits 0-9.
Both num1 and num2 does not contain any leading zero.
You must not use any built-in BigInteger library or convert the inputs to integer directly.
*/


//My Answer
char* addStrings(char* num1, char* num2) {
    char * sum;
    int len_1 = strlen(num1);
    int len_2 = strlen(num2);
    int len = len_1 > len_2 ? len_1 : len_2;
    sum = malloc(sizeof(char)*(len + 2)); //分配内存
    int mid = 0;
    int res = 0;
    sum[len+1] = '\0';
    for(int i=len ; i>=0 ; i--)
    {
        int a = --len_1>=0 ? num1[len_1] - '0' : 0; //如果超过下标则赋值为0
        int b = --len_2 >=0 ? num2[len_2] - '0' : 0;
        res = a + b + mid;
        sum[i] = res % 10 + '0';
        mid = res / 10;
    }
    if(sum[0] == '0' && sum[1] != '\0')   //存在两个数为0的情况
        return &sum[1]; //如果首字符为'0'
    else
        return sum;
}


//他山之玉
//C++
class Solution {
public:
string addStrings(string num1, string num2) {
    int i = num1.size() - 1;
    int j = num2.size() - 1;
    int carry = 0;
    string res = "";
    while(i>=0 || j>=0 || carry){
        long sum = 0;
        if(i >= 0){sum += (num1[i] - '0');i--;}
        if(j >= 0){sum += (num2[j] - '0');j--;}
        sum += carry; 
        carry = sum / 10;
        sum = sum % 10;
        res =  res + to_string(sum);
    }
    reverse(res.begin(), res.end());
    return res;
}
};


//C++
class Solution {
public:
    string addStrings(string num1, string num2) {
        if (num1.size() < num2.size()) return addStrings(num2, num1);
        int carry = 0, i = num1.size() - 1, j = num2.size() - 1;
        for (; i >= 0 && (carry || j >= 0); i--, j--, carry /= 10) 
            num1[i] = (carry += num1[i] - '0' + (j >= 0 ? num2[j] - '0' : 0)) % 10 + '0';
        return (carry ? "1" : "") + num1;
    }
};
