/*
Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Example 1:

Input: [1,3,5,6], 5
Output: 2
Example 2:

Input: [1,3,5,6], 2
Output: 1
Example 3:

Input: [1,3,5,6], 7
Output: 4
Example 4:

Input: [1,3,5,6], 0
Output: 0
*/


//My Answer
int searchInsert(int* nums, int numsSize, int target) {
    if(target<nums[0])
        return 0;
    else if(target > nums[numsSize-1])
        return numsSize;
    else{
        for(int i = 0 ; i<numsSize ; i++)
        {
            if(nums[i] == target)
                return i;
            else if(nums[i]<target && nums[i+1] > target)
                return i+1;
        }
    }
    return 0; //必须加上，因为存在数组中无元素的可能性
}


//他山之玉
/*
I think the solution does not need a lot of if statement.
Only two cases:
1 if found, just return current index
2 if not found, return next index where the search end
*/
int search(int A[], int start, int end, int target) {
    if (start > end) return start;
    int mid = (start + end) / 2;
    if (A[mid] == target) return mid;
    else if (A[mid] > target) return search(A, start, mid - 1, target);
    else return search(A, mid + 1, end, target);
}
int searchInsert(int A[], int n, int target) {
    return search(A, 0, n - 1, target);
}

//Python
class Solution(object):
    def searchInsert(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """       
        return len([x for x in nums if x<target])
        
 //binary search
  int searchInsert(vector<int>& nums, int target) {
        int begin = 0, end = nums.size()-1, mid = 0;
        while(begin<=end){
            mid = (begin+end)/2;
            if(nums[mid]<target) begin = (mid++)+1;
            else end = mid-1;
        }
        return mid;
    }
