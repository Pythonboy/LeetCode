/*
Given a string which consists of lowercase or uppercase letters, find the length of the longest palindromes that can be built with those letters.

This is case sensitive, for example "Aa" is not considered a palindrome here.

Note:
Assume the length of given string will not exceed 1,010.

Example:

Input:
"abccccdd"

Output:
7

Explanation:
One longest palindrome that can be built is "dccaccd", whose length is 7.
*/



//My Answer
//思路：判断字符是否是成对出现；独个字符只需要一个
int longestPalindrome(char* s) {
    int in[100] = {0};
    for(int i = 0 ; i<strlen(s) ; i++)
        in[s[i] - 'A'] += 1;
    int res = 0;
    for(int i = 0 ; i< 100 ; i++)
    {
        res += 2*(in[i]/2);       //因为在C中/是地板除
    }
    for(int i = 0 ; i<100 ; i++)
    {
        if(in[i]%2 == 1)
        {
            res += 1;
            break;
        }
    }
    return res;
}


//他山之玉
//Java
public int longestPalindrome(String s) {
        if(s==null || s.length()==0) return 0;
        HashSet<Character> hs = new HashSet<Character>();
        int count = 0;
        for(int i=0; i<s.length(); i++){
            if(hs.contains(s.charAt(i))){
                hs.remove(s.charAt(i));
                count++;
            }else{
                hs.add(s.charAt(i));
            }
        }
        if(!hs.isEmpty()) return count*2+1;
        return count*2;
}

//C++
int longestPalindrome(string s) {
    int odds = 0;
    for (char c='A'; c<='z'; c++)
        odds += count(s.begin(), s.end(), c) & 1;
    return s.size() - odds + (odds > 0);
}

//python
class Solution(object):
    def longestPalindrome(self, s):
        dict = {}
        sum = 0
        for i in s:
            if dict.get(i, 0):
                dict[i] = 0
                sum += 2
            else:
                dict[i] = 1
        for j in dict:
            if dict[j] != 0:
                sum += 1
                break
        return sum
