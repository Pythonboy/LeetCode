/*

Given two binary strings, return their sum (also a binary string).

The input strings are both non-empty and contains only characters 1 or 0.

Example 1:

Input: a = "11", b = "1"
Output: "100"
Example 2:

Input: a = "1010", b = "1011"
Output: "10101"
*/

//My Answer
//本质上还是以数组表示的数相加，只不过是二进制
char* addBinary(char* a, char* b) {
    char * sum;
    int len_a = strlen(a);
    int len_b = strlen(b);
    int len = len_a > len_b ? len_a : len_b ;
    sum = malloc(sizeof(char)*(len+2));
    sum[len+1] = '\0';
    int res = 0;
    int mid = 0;
    for(int i=len ; i>=0 ; i--)
    {
        int A = --len_a>=0 ? a[len_a] - '0' : 0;
        int B = --len_b>=0 ? b[len_b] - '0' : 0;
        res = (A + B + mid)%2;
        mid = (A + B + mid)/2;
        sum[i] = res + '0';
    }
    if(sum[0]=='0'&&sum[1]!='\0')
        return &sum[1];
    else
        return sum;
}


//他山之玉
class Solution
{
public:
    string addBinary(string a, string b)
    {
        string s = "";
        
        int c = 0, i = a.size() - 1, j = b.size() - 1;
        while(i >= 0 || j >= 0 || c == 1)
        {
            c += i >= 0 ? a[i --] - '0' : 0;
            c += j >= 0 ? b[j --] - '0' : 0;
            s = char(c % 2 + '0') + s;
            c /= 2;
        }
        
        return s;
    }
};

//Python
class Solution:
    def addBinary(self, a, b):
        return bin(eval('0b' + a) + eval('0b' + b))[2:]
