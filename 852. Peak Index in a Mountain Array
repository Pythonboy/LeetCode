/*
Let's call an array A a mountain if the following properties hold:

A.length >= 3
There exists some 0 < i < A.length - 1 such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1]
Given an array that is definitely a mountain, return any i such that A[0] < A[1] < ... A[i-1] < A[i] > A[i+1] > ... > A[A.length - 1].

Example 1:

Input: [0,1,0]
Output: 1
Example 2:

Input: [0,2,1,0]
Output: 1
Note:

3 <= A.length <= 10000
0 <= A[i] <= 10^6
A is a mountain, as defined above.
*/

//My Answer
//思路一：线性寻找最大值
int Max(int * A, int Asize)
{
    
    int max_i = 0;
    for(int i = 0 ; i < Asize ; i++)
    {
        if(A[max_i] < A[i])
        {
            max_i = i;
        }
            
    }
    return max_i;
}

int peakIndexInMountainArray(int* A, int ASize) {
    int a = Max(A,ASize);
    return a;
}

//思路：二分查找最大值
int peakIndexInMountainArray(int* A, int ASize) {
    int Left = 0 , Right = ASize - 1;
    while(Left < Right)
    {
        int mid = (Left + Right)/2;
        if(A[mid]<A[mid+1])
            Left = mid+1;
        else
            Right = mid;
    }
    return Left;
}


//他山之玉
int peakIndexInMountainArray(vector<int>& A) {
    return distance (A.begin (), max_element (A.begin (), A.end ()));
}
