Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 

Input: 19
Output: true
Explanation: 
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1



//My Answer
int cycle(int m)   //返回m每一位上对应数的平方和
{
    int res = 0;
    int mid;
    while(m>0)
    {
        mid = m%10;
        m = m/10;
        res += pow(mid,2);
    }
    return res;
}

bool isHappy(int n) {
    int i;  //确定最大循环次数
    for(i=0 ; i<100 ; i++)
    {
        n = cycle(n);
        if(n==1)
            return true;
    }
    return false;
}


//他山之玉

//Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval):
//C
bool isHappy(int n) {
    while(n>6){
        int next = 0;
        while(n){next+=(n%10)*(n%10); n/=10;}
        n = next;
    }
    return n==1;
}


//创建一个快数，一个慢数，在相遇时是否为1进行判断
//Python
def isHappy(self, n):
    """
    :type n: int
    :rtype: bool
    """
    r1 = self.step(n)
    r2 = self.step(r1)
    while(r1 != 1):
        if(r1 == r2):
            return False
        else:
            r1 = self.step(r1)
            r2 = self.step(self.step(r2))
    return True

def step(self, n):
    result = 0
    while(n):
        result += pow(n % 10, 2)
        n = n // 10
    return result
    
//C 
int digitSquareSum(int n) {
    int sum = 0, tmp;
    while (n) {
        tmp = n % 10;
        sum += tmp * tmp;
        n /= 10;
    }
    return sum;
}

bool isHappy(int n) {
    int slow, fast;
    slow = fast = n;
    do {
        slow = digitSquareSum(slow);
        fast = digitSquareSum(fast);
        fast = digitSquareSum(fast);
    } while(slow != fast);
    if (slow == 1) return 1;
    else return 0;
}










