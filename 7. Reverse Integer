/*
Given a 32-bit signed integer, reverse digits of an integer.

Example 1:

Input: 123
Output: 321
Example 2:

Input: -123
Output: -321
Example 3:

Input: 120
Output: 21
Note:
Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−231,  231 − 1].
For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.
*/

//My Answer
int reverse(int x) {
    int res = 0; //记录最后返回的数
    int z;//记录x%10的余数
    while (x != 0)
    {
        z = x % 10;
        if (res > INT_MAX/10 || (res == INT_MAX / 10 && z > 7)) return 0;
        if (res < INT_MIN/10 || (res == INT_MIN / 10 && z < -8)) return 0;
        res = res*10 + z;
        x = x / 10;
        
    }
    return res;
}


//他山之玉

//C
int reverse(int x) {
    long long val = 0;
	do 
	{
		val = val * 10 + x % 10;
		x /= 10;
	} while (x);
  
  
  //C
  int reverse(int x) {
int px=0;
while(x!=0)
 {
    if(px>INT_MAX/10 || px<INT_MIN/10)return 0;
    px=px*10+x%10;
    x=x/10;
}
return px; 
}
	
	return (val > INT_MAX || val < INT_MIN) ? 0 : val;
}
