/*
Count the number of prime numbers less than a non-negative number, n.

Example:

Input: 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.
*/


//My Answer
//关键在于如何快速正确的判断是否为素数
int IsPrime(int m)      //判断是否为素数的快速方法
{
    int item = (int)sqrt(m) + 1;
    int j;
    if(m<=1)
        return 0;
    else if(m==2 || m==3)
        return 1;
    else if(m%6 != 1 && m%6 != 5)
        return 0;
    for(j=5 ; j<=item ; j+=6)
    {
        if(m%j==0 || m%(j+2)==0)
            return 0;
    }
    return 1;
}

int countPrimes(int n) {
    int count = 0;
    for(int i = 0 ; i<n ; i++)
    {
        if(IsPrime(i))
            count++;
    }
    return count;
}



//他山之玉
class Solution {
public:
    int countPrimes(int n) {
        vector<bool> prime(n, true);
        prime[0] = false, prime[1] = false;
        for (int i = 0; i < sqrt(n); ++i) {
            if (prime[i]) {
                for (int j = i*i; j < n; j += i) {
                    prime[j] = false;
                }    
            }    
        }
        return count(prime.begin(), prime.end(), true);
    }
};

//Python
def countPrimes(self, n):
    if n <= 2:
        return 0
    res = [True] * n
    res[0] = res[1] = False
    for i in xrange(2, n):
        if res[i] == True:
            for j in xrange(2, (n-1)//i+1):
                res[i*j] = False
    return sum(res)
