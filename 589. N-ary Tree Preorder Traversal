/*
Given an n-ary tree, return the preorder traversal of its nodes' values.

For example, given a 3-ary tree:

Return its preorder traversal as: [1,3,5,6,2,4].

Note: Recursive solution is trivial, could you do it iteratively?
*/


//Java
Iterative Solution

class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> list = new ArrayList<>();
        if (root == null) return list;
        
        Stack<Node> stack = new Stack<>();
        stack.add(root);
        
        while (!stack.empty()) {
            root = stack.pop();
            list.add(root.val);
            for (int i = root.children.size() - 1; i >= 0; i--)
                stack.add(root.children.get(i));
        }
        
        return list;
    }
}
Recursive Solution

class Solution {
    public List<Integer> list = new ArrayList<>();
    public List<Integer> preorder(Node root) {
        if (root == null)
            return list;
        
        list.add(root.val);
        for(Node node: root.children)
            preorder(node);
                
        return list;
    }
}

//C++
vector<int> preorder(Node* root) {
    if(root==NULL) return {};
    stack<Node*> stk;
    vector<int> res;
    stk.push(root);
    while(!stk.empty()) {
        Node* temp=stk.top();
        stk.pop();
        for(int i=temp->children.size()-1;i>=0;i--) stk.push(temp->children[i]);
        res.push_back(temp->val);
    }
    return res;
}


//Python
class Solution(object):
    def preorder(self, root):
        if not root: return []
        t=[root.val]
        for i in root.children:
            t+=self.preorder(i)
        return t


